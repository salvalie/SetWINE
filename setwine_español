#!/usr/bin/env bash


#######################################################################################

# Warnings handler
set -o errtrace 

trap 'func=${FUNCNAME[1]:-main}; echo "WARNING: función \"${func}\" devolvió error" >&2' ERR

# Defining gecho as Green (success) and recho as Red (error/warning) for echo's
GREEN='\033[0;32m'; RED='\033[0;31m'; RESET='\033[0m'

gecho(){ printf '%b\n' "${GREEN}$*${RESET}"; }
recho(){ printf '%b\n' "${RED}$*${RESET}"; }


########################################################################################

check_internet() {
  gecho "Verificando conexión an Internet ..."
  if ! ping -q -c 1 -W 1 1.1.1.1 >/dev/null; then
    recho "Sin conexión a Internet. Abortando."
    exit 1
  fi
}

check_architecture() {
    if [[ "$(uname -m)" != "x86_64" && "$(uname -m)" != "amd64" ]]; then
        recho "No estás en una arquitectura amd64 o x86_64, paramos."
        exit 1
    else
        gecho "Estás en una arquitectura amd64 o x86_64"
    fi
}

check_wine_installed() {
  gecho "Verificando si Wine ya está instalado..."

  if command -v wine >/dev/null 2>&1 && [[ "$(command -v wine)" != "$HOME/.local/bin/wine" ]]; then
    recho "Wine ya está instalado globalmente en el sistema. Abortando instalación."
    exit 1
  fi

  if [[ -d "$HOME/.local/wine" ]]; then
    gecho "Se detectó una instalación previa de Wine en ~/.local/wine."
    gecho "Por si acaso no vamos a remover .wine (tu prefix o "disco C" de Wine)"
    read -rp "¿Deseás eliminar Wine (no tu prefix) y continuar con una nueva instalación? [s/N]: " respuesta
    case "$respuesta" in
      [sS][iI]|[sS])
        gecho "Eliminando ~/.local/wine..."
        rm -rf "$HOME/.local/wine"
        ;;
      *)
        recho "Abortando instalación."
        exit 1
        ;;
    esac
  fi
}


check_cachyos() {
  gecho "Verificando si estás en CachyOS..."
  if grep -qi 'cachyos' /etc/os-release; then
    gecho "Sistema operativo identificado como CachyOS."
  else
    gecho "Advertencia: no estás en CachyOS. Este script fue diseñado para CachyOS y puede no funcionar correctamente. Lo testeé en Ubuntu una sola vez. Imposible que rompa algo igual"
    read -rp "¿Deseás continuar bajo tu propio riesgo? [s/N]: " respuesta
    case "$respuesta" in
      [sS][iI]|[sS]) 
        gecho "Continuando..."
        ;;
      *)
        recho "Abortando instalación."
        exit 1
        ;;
    esac
  fi
}

general_check() {
  check_internet
  check_architecture
  check_wine_installed
  check_cachyos
}

check_wine_ntsync_and_proton_wow64() {
  local url_api="https://api.github.com/repos/Kron4ek/Wine-Builds/releases"
  local respuesta=$(wget -qO- "$url_api")

  if [[ -z "$respuesta" ]]; then
    recho "No se pudo obtener respuesta de la API de GitHub."
    return 1
  fi

  local ntsync_urls=($(echo "$respuesta" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-[0-9]+\.[0-9]+(-[0-9]+)?-staging-tkg-ntsync-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  local proton_urls=($(echo "$respuesta" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-proton-[0-9]+\.[0-9]+(-[0-9]+)?-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  printf '%s\n' "${ntsync_urls[@]}" "${proton_urls[@]}"
}

install_wine() {
  gecho "Buscando versiones de Wine ntsync y Proton WOW64..."
  mapfile -t urls < <(check_wine_ntsync_and_proton_wow64)

  urls=($(printf '%s\n' "${urls[@]}" | grep -E '^https?://'))

  if [[ ${#urls[@]} -eq 0 ]]; then
    recho "No se encontraron versiones disponibles de Wine."
    exit 1
  fi

  gecho "Seleccione la versión de Wine que desea instalar:"
  local i=1
  for url in "${urls[@]}"; do
    echo "  $i) $url"
    ((i++))
  done

  local opcion
  read -rp "Ingrese el número de la versión deseada [1-${#urls[@]}]: " opcion

  if ! [[ "$opcion" =~ ^[1-9][0-9]*$ ]] || (( opcion < 1 || opcion > ${#urls[@]} )); then
    recho "Opción inválida."
    exit 1
  fi

  local url="${urls[$((opcion-1))]}"
  local destino="$HOME/.local/wine"

  gecho "Instalando Wine desde:"
  echo "$url"

  if [[ -d "$destino" ]]; then
    gecho "La carpeta $destino ya existe. Se eliminará para reemplazarla."
    rm -rf "$destino"
  fi

  wget -O "$HOME/wine.tar.xz" "$url" || {
    recho "Error al descargar Wine desde $url"
    exit 1
  }

  tar -xf "$HOME/wine.tar.xz" -C "$HOME/.local/" || {
    recho "Error al extraer Wine"
    exit 1
  }

  carpeta_extraida=$(find "$HOME/.local" -maxdepth 1 -type d \( \
    -name "wine-*-staging-tkg-ntsync-amd64-wow64" -o \
    -name "wine-proton-*-amd64-wow64" \
    \) -print -quit)

  if [[ -z "$carpeta_extraida" ]]; then
    recho "No se encontró la carpeta extraída."
    exit 1
  fi

  mv "$carpeta_extraida" "$destino" || {
    recho "Error al mover la carpeta extraída."
    exit 1
  }

  rm "$HOME/wine.tar.xz"

  gecho "Wine se ha instalado correctamente en: $destino"
}


create_binary_links() {
    mkdir -p "$HOME/.local/bin"
    cat > "$HOME/.local/bin/wine" <<EOF
#!/bin/bash
export WINEFSYNC=1
export WINENTSYNC=1
export MANGOHUD=1
exec "$HOME/.local/wine/bin/wine" "\$@"
EOF
    chmod +x "$HOME/.local/bin/wine"
    ln -sf "$HOME/.local/wine/bin/winecfg" "$HOME/.local/bin/winecfg"
    ln -sf "$HOME/.local/wine/bin/wineserver" "$HOME/.local/bin/wineserver"
    ln -sf "$HOME/.local/wine/bin/wineboot" "$HOME/.local/bin/wineboot"
    gecho "Enlaces simbólicos creados en ~/.local/bin y wrapper para wine creado."
}

add_local_bin() {
    check_shell() {
        if [ -n "$FISH_VERSION" ]; then
            echo "fish"
        elif [ -n "$ZSH_VERSION" ]; then
            echo "zsh"
        elif [ -n "$BASH_VERSION" ]; then
            echo "bash"
        else
            basename "$(ps -p $$ -o comm=)"
        fi
    }

    shell_actual=$(check_shell)
    case "$shell_actual" in
        bash)
            archivo_bash="$HOME/.bashrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$archivo_bash"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$archivo_bash"
                gecho "Se ha agregado ~/.local/bin al PATH en $archivo_bash."
            else
                gecho "Ya está agregado ~/.local/bin al PATH en $archivo_bash."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        zsh)
            archivo_zsh="$HOME/.zshrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$archivo_zsh"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$archivo_zsh"
                gecho "Se ha agregado ~/.local/bin al PATH en $archivo_zsh."
            else
                gecho "Ya está agregado ~/.local/bin al PATH en $archivo_zsh."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        fish)
            archivo_fish="$HOME/.config/fish/config.fish"
            if ! grep -q "set -gx PATH \$HOME/.local/bin \$PATH" "$archivo_fish"; then
                echo "set -gx PATH \$HOME/.local/bin \$PATH" >> "$archivo_fish"
                gecho "Se ha agregado ~/.local/bin al PATH en $archivo_fish."
            else
                gecho "Ya está agregado ~/.local/bin al PATH en $archivo_fish."
            fi
            # Aplica de inmediato en fish
            if command -v fish &> /dev/null; then
                fish -c "set -gx PATH \$HOME/.local/bin \$PATH"
            fi
            ;;
        *)
            recho "No se ha reconocido la shell. No se pudo agregar la ruta al PATH. Tocará que la agregues tu mismo."
            ;;
    esac
    gecho "PATH actualizado en esta sesión."
}

install_winetricks() {
    wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks -O "$HOME/.local/bin/winetricks" || {
        recho "Error al descargar winetricks"
        return 1
    }

    sed -i '/^#!/a export W_OPT_UNATTENDED=1' "$HOME/.local/bin/winetricks"
    chmod +x "$HOME/.local/bin/winetricks"
    gecho "Winetricks instalado correctamente."
}

create_wine_launcher() {
    local desktop_file="$HOME/.local/share/applications/wine.desktop"

    if [[ -f "$desktop_file" ]]; then
        gecho "El archivo wine.desktop ya existe. No se realizaron cambios."
        return 0
    fi

    mkdir -p "$(dirname "$desktop_file")"
    cat > "$desktop_file" <<EOF
[Desktop Entry]
Type=Application
Name=Wine Windows Program Loader
Exec=wine start /unix %f
MimeType=application/x-ms-dos-executable;application/x-msi;application/x-ms-shortcut;application/x-bat;application/x-mswinurl
Icon=wine
NoDisplay=false
StartupNotify=true
EOF

    update-desktop-database "$HOME/.local/share/applications"

    xdg-mime default wine.desktop application/x-ms-dos-executable
    xdg-mime default wine.desktop application/x-msi
    xdg-mime default wine.desktop application/x-ms-shortcut
    xdg-mime default wine.desktop application/x-bat
    xdg-mime default wine.desktop application/x-mswinurl

    gecho "wine.desktop creado y asociado correctamente a los archivos ejecutables de Windows."
}

setup_prefix() {
    if ! command -v wine &> /dev/null; then
        recho "Error: wine no está instalado."
        return 1
    fi

    WINEDEBUG=-all wineboot --init > /dev/null 2>&1
}


setup_dxvk() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks no está disponible."
        return 1
    fi

    gecho "¿Qué versión de DXVK querés instalar? Después podés cambiarla con winetricks"
    gecho "  1) dxvk2041 (estable para intel)"
    gecho "  2) dxvk2051"
    gecho "  3) dxvk (última disponible)"
    read -rp "Elegí una opción [1-3]: " opcion

    case "$opcion" in
        1) dxvk_ver="dxvk2041" ;;
        2) dxvk_ver="dxvk2051" ;;
        3) dxvk_ver="dxvk" ;;
        *) recho "Opción inválida. Abortando configuración DXVK." ; return 1 ;;
    esac

    gecho "Instalando $dxvk_ver (DX8/9/10/11) y lo último de vkd3d(DX12) con winetricks..."
    gecho "Recomiendo instalar "cabextract" con pacman o apt para instalar cualquier cosa más con winetricks"
    WINEDEBUG=-all winetricks --force "$dxvk_ver" vkd3d > /dev/null 2>&1
}



setup_wayland() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks no está instalado o no se puede ejecutar."
        return 1
    fi

    if [ "$XDG_SESSION_TYPE" != "wayland" ]; then
        recho "No estás en una sesión Wayland. Dejando x11"
        return 1
    fi

    gecho "Vamos a habilitar el modo Wayland. Para volver a X11 usá 'winetricks graphics=x11'."
    WINEDEBUG=-all winetricks graphics=wayland > /dev/null 2>&1
}


detect_desktop_environment() {
    if [[ "$XDG_CURRENT_DESKTOP" =~ GNOME ]]; then
        echo "gnome"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ XFCE ]]; then
        echo "xfce"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ KDE ]]; then
        echo "kde"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ Cinnamon ]]; then
        echo "cinnamon"
    else
        echo "unknown"
    fi
}

setup_wine_killer_shortcut() {
    local de=$(detect_desktop_environment)

    case "$de" in
        gnome)
            gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/']"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ name "Wine Killer"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ command "wineserver -k"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ binding "<Ctrl><Alt>Q"
            echo "Atajo creado en GNOME. Ahora podés terminar Wine en cualquier momento con Ctrl+Alt+Q."
            ;;

        xfce)
            xfconf-query -c xfce4-keyboard-shortcuts -p "/commands/custom/<Primary><Alt>Q" -n -t string -s "wineserver -k"
            gecho "Atajo creado en XFCE. Ahora podés terminar Wine en cualquier momento con Ctrl+Alt+Q."
            ;;

        kde)
            gecho "Plasma 6 hace muy dificil crear un hotkey por CLI"
            gecho "Deberias ir a "shortcuts" y crear un hotkey para "wineserver -k" con algun hotkey a eleccion para matar Wine en caso de ser necesario"
            ;;

        cinnamon)
            gsettings set org.cinnamon.desktop.keybindings custom-list "['custom0']"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ name "Wine Killer"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ command "wineserver -k"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ binding "<Ctrl><Alt>Q"
            gecho "Atajo creado en Cinnamon. Ahora podés terminar Wine en cualquier momento con Ctrl+Alt+Q."
            ;;

        *)
            recho "Entorno de escritorio no soportado."
            return 1
            ;;
    esac
}

install_wineshort2desktop() {
    local target="$HOME/.local/bin/wineshort2desktop"
    mkdir -p "$HOME/.local/bin"

    cat > "$target" <<'EOF'
#!/usr/bin/env bash

create_wine_shortcut() {
    if [[ $# -lt 2 ]]; then
        echo "Uso: create_wine_shortcut <juego.exe> <Nombre del acceso directo>"
        return 1
    fi

    local exe="$1"
    local name="$2"

    # Verificar dependencias necesarias
    local missing=()
    command -v wrestool >/dev/null || missing+=("icoutils (wrestool)")
    command -v convert  >/dev/null || missing+=("imagemagick (convert)")
    command -v identify >/dev/null || missing+=("imagemagick (identify)")

    if (( ${#missing[@]} > 0 )); then
        echo "Faltan las siguientes dependencias:"
        printf '  - %s\n' "${missing[@]}"

        # Detectar package manager
        local pkg_mgr=""
        if command -v apt >/dev/null; then
            pkg_mgr="apt"
        elif command -v dnf >/dev/null; then
            pkg_mgr="dnf"
        elif command -v pacman >/dev/null; then
            pkg_mgr="pacman"
        fi

        if [[ -n "$pkg_mgr" ]]; then
            echo "Se requieren los siguientes paquetes: imagemagick, icoutils"
            read -rp "¿Deseás instalarlos ahora? [s/n]: " resp
            if [[ "$resp" =~ ^[Ss]$ ]]; then
                case "$pkg_mgr" in
                    apt)
                        sudo apt update && sudo apt install -y imagemagick icoutils
                        ;;
                    dnf)
                        sudo dnf install -y imagemagick icoutils
                        ;;
                    pacman)
                        sudo pacman -Sy --noconfirm imagemagick icoutils
                        ;;
                esac
            else
                echo "Cancelado: no se instalaron las dependencias."
                return 1
            fi
        else
            echo "No se encontró un gestor de paquetes compatible (apt, dnf, pacman)."
            echo "Por favor instalá manualmente: imagemagick, icoutils"
            return 1
        fi
    fi

    local cwd
    cwd="$(pwd)"
    local exe_path="$cwd/$exe"
    local base_name="${exe%.exe}"
    local launcher_path="$cwd/$base_name.sh"
    local icon_path="$cwd/icon.png"
    local shortcut_path="$(xdg-user-dir DESKTOP)/$name.desktop"
    local wine_path="$HOME/.local/bin/wine"

    if [[ ! -f "$exe_path" ]]; then
        echo "Error: no se encontró el .exe: $exe_path"
        return 1
    fi

    # Extraer íconos si están las herramientas
    local temp_dir
    temp_dir="$(mktemp -d)"
    wrestool -x --type=14 "$exe_path" -o "$temp_dir" 2>/dev/null

    shopt -s nullglob
    for ico in "$temp_dir"/*.ico; do
        convert "$ico" "${ico%.ico}.png" 2>/dev/null
    done

    local best_png=""
    local best_area=0
    for png in "$temp_dir"/*.png; do
        local dimensions
        dimensions=$(identify -format "%w %h" "$png" 2>/dev/null)
        local width height area
        read -r width height <<< "$dimensions"
        area=$((width * height))
        if (( area > best_area )); then
            best_area=$area
            best_png="$png"
        fi
    done

    if [[ -n "$best_png" ]]; then
        cp "$best_png" "$icon_path"
        echo "Icono extraído: $icon_path"
    else
        echo "Falló la extracción del icono: no se encontraron imágenes adecuadas."
    fi

    rm -rf "$temp_dir"

    # Crear lanzador
    cat <<EOF2 > "$launcher_path"
#!/bin/bash
cd "\$(dirname "\$0")"
#export WINEDLLOVERRIDES="example=n,b" // here you can export libraries, handy for hacks that require custom libs, example: "export WINEDLLOVERRIDES="winmm=n,b"" 
exec "$wine_path" "$exe"
EOF2

    chmod +x "$launcher_path"

    # Crear acceso directo
    cat <<EOF2 > "$shortcut_path"
[Desktop Entry]
Encoding=UTF-8
Version=1.0
Type=Application
Name=$name
GenericName=$name
Comment=$name
Icon=$icon_path
Exec="$launcher_path"
Categories=Game;
Path=$cwd
Terminal=false
EOF2

    chmod +x "$shortcut_path"
    echo "Acceso directo creado: $shortcut_path"
}

create_wine_shortcut "$@"
EOF

    chmod +x "$target"
    gecho "Script 'wineshort2desktop' instalado en ~/.local/bin/"
    gecho "Ahora podés crear accesos directos para tus juegos de Wine directamente en el escritorio usando este script."
}

######################################################################################################

main_loop() {
    gecho "=========== INICIANDO INSTALACIÓN DE WINE WoW64 + NTsync + Wayland + DXVK ==========="

    general_check

    gecho "----------> Instalando Wine personalizado..."
    
    install_wine

    gecho "----------> Creando enlaces simbólicos..."
    
    create_binary_links

    gecho "----------> Asegurando que ~/.local/bin esté en el PATH..."
    
    add_local_bin

    gecho "----------> Instalando Winetricks..."
    
    install_winetricks

    gecho "----------> Inicializando el prefix..."

    setup_prefix

    gecho "----------> Instalando DXVK..."

    setup_dxvk

    gecho "----------> Configurando para usar Wayland..."

    setup_wayland

    gecho "----------> Creando lanzador de Wine..."

    create_wine_launcher

    gecho "----------> Agregando atajo de teclado para cerrar Wine con CTRL + ALT + Q ..."

    setup_wine_killer_shortcut

    gecho "----------> Creando el creado de shortcuts para Escritorio "wineshort2desktop"..."

    install_wineshort2desktop
    
    gecho "=========== INSTALACIÓN COMPLETA ==========="
    gecho "Desloguea sesión y volve a loguear!"
}

main_loop
