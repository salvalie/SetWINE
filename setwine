#!/usr/bin/env bash

#######################################################################################

# Defining gecho as Green (success) and recho as Red (error) for echo's
GREEN='\033[0;32m'; RED='\033[0;31m'; RESET='\033[0m'

gecho(){ printf '%b\n' "${GREEN}$*${RESET}"; }
recho(){ printf '%b\n' "${RED}$*${RESET}"; }

########################################################################################

uninstall_wine() {
    shopt -s nullglob
    local files=( "$HOME/.local/bin"/wine* )
    if [ ${#files[@]} -gt 0 ]; then
        echo "Deleting files:"
        printf " - %s\n" "${files[@]}"
        rm -f "${files[@]}"
    else
        echo "No wine* files found in ~/.local/bin"
    fi
    shopt -u nullglob

    for dir in "$HOME/.local/bin/wine" "$HOME/.local/wine" "$HOME/.wine" "$HOME/.cache/winetricks"; do
        if [ -d "$dir" ]; then
            echo "Deleting directory: $dir"
            rm -rf "$dir"
        else
            echo "Does not exist, nothing to delete."
        fi
    done
}


check_internet() {
  gecho "Checking internet connection..."
  if ! ping -q -c 1 -W 1 1.1.1.1 >/dev/null; then
    recho "No internet connection. Aborting."
    exit 1
  fi
}

check_architecture() {
    if [[ "$(uname -m)" != "x86_64" && "$(uname -m)" != "amd64" ]]; then
        recho "You are not on amd64 or x86_64 architecture, stopping."
        exit 1
    else
        gecho "You are on amd64 or x86_64 architecture"
    fi
}

check_wine_installed() {
  gecho "Checking if Wine is already installed..."

  if command -v wine >/dev/null 2>&1 && [[ "$(command -v wine)" != "$HOME/.local/bin/wine" ]]; then
    recho "Wine is already installed globally on the system. Aborting installation."
    exit 1
  fi

  if [[ -d "$HOME/.local/wine" ]]; then
    gecho "A previous Wine installation was detected in ~/.local/wine."
    gecho "For safety we will not remove .wine (your Wine prefix or C: drive)"
    read -rp "Do you want to remove Wine (not your prefix) and continue with a new installation? [y/N]: " answer
    case "$answer" in
      [yY][eE][sS]|[yY])
        gecho "Removing ~/.local/wine..."
        rm -rf "$HOME/.local/wine"
        ;;
      *)
        recho "Aborting installation."
        exit 1
        ;;
    esac
  fi
}


check_cachyos() {
  gecho "Checking if you are on CachyOS..."
  if grep -qi 'cachyos' /etc/os-release; then
    gecho "Operating system identified as CachyOS."
  else
    gecho "Warning: you are not on CachyOS. This script was designed for CachyOS and may not work correctly. I tested it on Ubuntu only once. Impossible to break anything though."
    read -rp "Do you want to continue at your own risk? [y/N]: " answer
    case "$answer" in
      [yY][eE][sS]|[yY]) 
        gecho "Continuing..."
        ;;
      *)
        recho "Aborting installation."
        exit 1
        ;;
    esac
  fi
}

general_check() {
  check_internet
  check_architecture
  check_wine_installed
  check_cachyos
}

check_wine_ntsync_and_proton_wow64() {
  local url_api="https://api.github.com/repos/Kron4ek/Wine-Builds/releases"
  local answer=$(wget -qO- "$url_api")

  if [[ -z "$answer" ]]; then
    recho "Could not get answer from GitHub API."
    return 1
  fi

  local ntsync_urls=($(echo "$answer" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-[0-9]+\.[0-9]+(-[0-9]+)?-staging-tkg-ntsync-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  local proton_urls=($(echo "$answer" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-proton-[0-9]+\.[0-9]+(-[0-9]+)?-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  printf '%s\n' "${ntsync_urls[@]}" "${proton_urls[@]}"
}

install_wine() {
  gecho "Looking for Wine ntsync and Proton WOW64 versions..."
  mapfile -t urls < <(check_wine_ntsync_and_proton_wow64)

  urls=($(printf '%s\n' "${urls[@]}" | grep -E '^https?://'))

  if [[ ${#urls[@]} -eq 0 ]]; then
    recho "No available Wine versions found."
    exit 1
  fi

  gecho "Select the Wine version you want to install:"
  local i=1
  for url in "${urls[@]}"; do
    echo "  $i) $url"
    ((i++))
  done

  local option
  read -rp "Enter the number of the desired version [1-${#urls[@]}]: " option

  if ! [[ "$option" =~ ^[1-9][0-9]*$ ]] || (( option < 1 || option > ${#urls[@]} )); then
    recho "Invalid option."
    exit 1
  fi

  local url="${urls[$((option-1))]}"
  local target="$HOME/.local/wine"

  gecho "Installing Wine from:"
  echo "$url"

  if [[ -d "$target" ]]; then
    gecho "Folder $target already exists. It will be deleted to replace it."
    rm -rf "$target"
  fi

  wget -O "$HOME/wine.tar.xz" "$url" || {
    recho "Error downloading Wine from $url"
    exit 1
  }

  tar -xf "$HOME/wine.tar.xz" -C "$HOME/.local/" || {
    recho "Error extracting Wine"
    exit 1
  }

  extracted_folder=$(find "$HOME/.local" -maxdepth 1 -type d \( \
    -name "wine-*-staging-tkg-ntsync-amd64-wow64" -o \
    -name "wine-proton-*-amd64-wow64" \
    \) -print -quit)

  if [[ -z "$extracted_folder" ]]; then
    recho "Extracted folder not found."
    exit 1
  fi

  mv "$extracted_folder" "$target" || {
    recho "Error moving the extracted folder."
    exit 1
  }

  rm "$HOME/wine.tar.xz"

  gecho "Wine has been set up correctly at: $target"
}


create_binary_links() {
    mkdir -p "$HOME/.local/bin"
    cat > "$HOME/.local/bin/wine" <<EOF
#!/bin/bash
export WINEFSYNC=1
export WINENTSYNC=1
export MANGOHUD=1

# 16-bit check
TARGET=""
for arg in "\$@"; do
    if [[ -f "\$arg" && "\$arg" =~ \.(exe|EXE|com|COM)$ ]]; then
        TARGET="\$arg"
        break
    fi
done

if [[ -n "\$TARGET" ]]; then
    FILEINFO=\$(file -b "\$TARGET")

    if echo "\$FILEINFO" | grep -Eqi "MS-DOS executable|NE executable"; then
        exec "\$HOME/.local/wine/bin/wine" "\$HOME/.local/otvdm/otvdm.exe" "\$TARGET"
    else
        exec "\$HOME/.local/wine/bin/wine" "\$@"
    fi
else
    exec "\$HOME/.local/wine/bin/wine" "\$@"
fi
EOF
    chmod +x "$HOME/.local/bin/wine"
    ln -sf "$HOME/.local/wine/bin/winecfg" "$HOME/.local/bin/winecfg"
    ln -sf "$HOME/.local/wine/bin/wineserver" "$HOME/.local/bin/wineserver"
    ln -sf "$HOME/.local/wine/bin/wineboot" "$HOME/.local/bin/wineboot"
    gecho "Symbolic links created in ~/.local/bin and wine wrapper created."
}


add_local_bin() {
    check_shell() {
        if [ -n "$FISH_VERSION" ]; then
            echo "fish"
        elif [ -n "$ZSH_VERSION" ]; then
            echo "zsh"
        elif [ -n "$BASH_VERSION" ]; then
            echo "bash"
        else
            basename "$(ps -p $$ -o comm=)"
        fi
    }

    current_shell=$(check_shell)
    case "$current_shell" in
        bash)
            bash_file="$HOME/.bashrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$bash_file"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$bash_file"
                gecho "~/.local/bin has been added to PATH in $bash_file."
            else
                gecho "~/.local/bin is already in PATH in $bash_file."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        zsh)
            zsh_file="$HOME/.zshrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$zsh_file"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$zsh_file"
                gecho "~/.local/bin has been added to PATH in $zsh_file."
            else
                gecho "~/.local/bin is already in PATH in $zsh_file."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        fish)
            fish_file="$HOME/.config/fish/config.fish"
            if ! grep -q "set -gx PATH \$HOME/.local/bin \$PATH" "$fish_file"; then
                echo "set -gx PATH \$HOME/.local/bin \$PATH" >> "$fish_file"
                gecho "~/.local/bin has been added to PATH in $fish_file."
            else
                gecho "~/.local/bin is already in PATH in $fish_file."
            fi

            if command -v fish &> /dev/null; then
                fish -c "set -gx PATH \$HOME/.local/bin \$PATH"
            fi
            ;;
        *)
            recho "Shell not recognized. Could not add path to PATH. You will need to add it yourself."
            ;;
    esac
    gecho "PATH updated in this session."
}

install_winetricks() {
    wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks -O "$HOME/.local/bin/winetricks" || {
        recho "Error downloading winetricks"
        return 1
    }

    sed -i '/^#!/a export W_OPT_UNATTENDED=1' "$HOME/.local/bin/winetricks"
    sed -i '/^#!/a export WINETRICKS_LATEST_VERSION_CHECK=disabled' "$HOME/.local/bin/winetricks"
    chmod +x "$HOME/.local/bin/winetricks"
    gecho "Winetricks installed successfully."
}

create_wine_launcher() {
    local desktop_file="$HOME/.local/share/applications/wine.desktop"

    if [[ -f "$desktop_file" ]]; then
        gecho "The wine.desktop file already exists. No changes made."
        return 0
    fi

    mkdir -p "$(dirname "$desktop_file")"
    cat > "$desktop_file" <<EOF
[Desktop Entry]
Type=Application
Name=Wine Windows Program Loader
Exec=wine start /unix %f
MimeType=application/x-ms-dos-executable;application/x-msi;application/x-ms-shortcut;application/x-bat;application/x-mswinurl
Icon=wine
NoDisplay=false
StartupNotify=true
EOF

    update-desktop-database "$HOME/.local/share/applications"

    xdg-mime default wine.desktop application/x-ms-dos-executable
    xdg-mime default wine.desktop application/x-msi
    xdg-mime default wine.desktop application/x-ms-shortcut
    xdg-mime default wine.desktop application/x-bat
    xdg-mime default wine.desktop application/x-mswinurl

    gecho "wine.desktop created and associated correctly with Windows executable files."
}

setup_prefix() {
    if ! command -v wine &> /dev/null; then
        recho "Error: wine is not installed correctly."
        exit 1
    fi

    WINEDEBUG=-all wineboot --init > /dev/null 2>&1
}


setup_dxvk() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks is not available."
        return 1
    fi

    gecho "Which DXVK version do you want to install? You can change it later with winetricks"
    gecho "  1) dxvk2041 (stable for intel)"
    gecho "  2) dxvk2051"
    gecho "  3) dxvk (latest available)"
    read -rp "Choose an option [1-3]: " option

    case "$option" in
        1) dxvk_ver="dxvk2041" ;;
        2) dxvk_ver="dxvk2051" ;;
        3) dxvk_ver="dxvk" ;;
        *) recho "Invalid option. Aborting DXVK setup." ; return 1 ;;
    esac

    gecho "Installing $dxvk_ver (DX8/9/10/11) and latest vkd3d(DX12) with winetricks..."
    gecho "I recommend installing 'cabextract' with pacman or apt for installing anything else with winetricks"
    WINEDEBUG=-all winetricks --force "$dxvk_ver" vkd3d > /dev/null 2>&1
}



setup_wayland() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks is not installed or cannot be executed."
        return 1
    fi

    if [ "$XDG_SESSION_TYPE" != "wayland" ]; then
        recho "You are not in a Wayland session. Leaving x11"
        return 0
    fi

    gecho "We will enable Wayland mode. To switch back to X11 use 'winetricks graphics=x11'."
    WINEDEBUG=-all winetricks graphics=wayland > /dev/null 2>&1
}


detect_desktop_environment() {
    if [[ "$XDG_CURRENT_DESKTOP" =~ GNOME ]]; then
        echo "gnome"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ XFCE ]]; then
        echo "xfce"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ KDE ]]; then
        echo "kde"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ Cinnamon ]]; then
        echo "cinnamon"
    else
        echo "unknown"
    fi
}

setup_wine_killer_shortcut() {
    local de=$(detect_desktop_environment)

    case "$de" in
        gnome)
            gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/']"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ name "Wine Killer"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ command "wineserver -k"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ binding "<Ctrl><Alt>Q"
            echo "Shortcut created in GNOME. You can now terminate Wine anytime with Ctrl+Alt+Q."
            ;;

        xfce)
            xfconf-query -c xfce4-keyboard-shortcuts -p "/commands/custom/<Primary><Alt>Q" -n -t string -s "wineserver -k"
            gecho "Shortcut created in XFCE. You can now terminate Wine anytime with Ctrl+Alt+Q."
            ;;

        kde)
            gecho "Plasma 6 makes it very difficult to create a hotkey via CLI"
            gecho "You should go to 'shortcuts' and create a hotkey for 'wineserver -k' with any hotkey of your choice to kill Wine if needed"
            ;;

        cinnamon)
            gsettings set org.cinnamon.desktop.keybindings custom-list "['custom0']"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ name "Wine Killer"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ command "wineserver -k"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ binding "<Ctrl><Alt>Q"
            gecho "Shortcut created in Cinnamon. You can now terminate Wine anytime with Ctrl+Alt+Q."
            ;;

        *)
            recho "Desktop environment not supported."
            return 1
            ;;
    esac
}

install_wineshort2desktop() {
    local target="$HOME/.local/bin/wineshort2desktop"
    mkdir -p "$HOME/.local/bin"

    cat > "$target" <<'EOF'
#!/usr/bin/env bash

create_wine_shortcut() {
    if [[ $# -lt 2 ]]; then
        echo "Use: create_wine_shortcut <software.exe> <DIRECT ACCESS NAME>"
        return 1
    fi

    local exe="$1"
    local name="$2"

    #  Verify necessary deps
    local missing=()
    command -v wrestool >/dev/null || missing+=("icoutils (wrestool)")
    command -v convert  >/dev/null || missing+=("imagemagick (convert)")
    command -v identify >/dev/null || missing+=("imagemagick (identify)")

    if (( ${#missing[@]} > 0 )); then
        echo "The following dependencies are missing:"
        printf '  - %s\n' "${missing[@]}"

        # Detect package manager
        local pkg_mgr=""
        if command -v apt >/dev/null; then
            pkg_mgr="apt"
        elif command -v dnf >/dev/null; then
            pkg_mgr="dnf"
        elif command -v pacman >/dev/null; then
            pkg_mgr="pacman"
        fi

        if [[ -n "$pkg_mgr" ]]; then
            echo "The next packagers are required: imagemagick, icoutils"
            read -rp "¿Do you want to install them? [s/n]: " resp
            if [[ "$resp" =~ ^[Yy]$ ]]; then
                case "$pkg_mgr" in
                    apt)
                        sudo apt update && sudo apt install -y imagemagick icoutils
                        ;;
                    dnf)
                        sudo dnf install -y imagemagick icoutils
                        ;;
                    pacman)
                        sudo pacman -Sy --noconfirm imagemagick icoutils
                        ;;
                esac
            else
                echo "Canceled: Deps werent installed."
                return 1
            fi
        else
            echo "No compat package manager found (apt, dnf, pacman)."
            echo "Please install manually the next packages: imagemagick, icoutils"
            return 1
        fi
    fi

    local cwd
    cwd="$(pwd)"
    local exe_path="$cwd/$exe"
    local base_name="${exe%.exe}"
    local launcher_path="$cwd/$base_name.sh"
    local icon_path="$cwd/icon.png"
    local shortcut_path="$(xdg-user-dir DESKTOP)/$name.desktop"
    local wine_path="$HOME/.local/bin/wine"

    if [[ ! -f "$exe_path" ]]; then
        echo "Error: .exe not found: $exe_path"
        return 1
    fi

    # Extrac icons
    local temp_dir
    temp_dir="$(mktemp -d)"
    wrestool -x --type=14 "$exe_path" -o "$temp_dir" 2>/dev/null

    shopt -s nullglob
    for ico in "$temp_dir"/*.ico; do
        convert "$ico" "${ico%.ico}.png" 2>/dev/null
    done

    local best_png=""
    local best_area=0
    for png in "$temp_dir"/*.png; do
        local dimensions
        dimensions=$(identify -format "%w %h" "$png" 2>/dev/null)
        local width height area
        read -r width height <<< "$dimensions"
        area=$((width * height))
        if (( area > best_area )); then
            best_area=$area
            best_png="$png"
        fi
    done

    if [[ -n "$best_png" ]]; then
        cp "$best_png" "$icon_path"
        echo "Icon extracted: $icon_path"
    else
        echo "Icon extracted failed: no proper images found."
    fi

    rm -rf "$temp_dir"

    # Create launcher
    cat <<EOF2 > "$launcher_path"
#!/bin/bash
cd "\$(dirname "\$0")"
#export WINEDLLOVERRIDES="example=n,b" // here you can export libraries, handy for hacks that require custom libs, example: "export WINEDLLOVERRIDES="winmm=n,b"" 
exec "$wine_path" "$exe"
EOF2

    chmod +x "$launcher_path"

    # create shortcut
    cat <<EOF2 > "$shortcut_path"
[Desktop Entry]
Encoding=UTF-8
Version=1.0
Type=Application
Name=$name
GenericName=$name
Comment=$name
Icon=$icon_path
Exec="$launcher_path"
Categories=Game;
Path=$cwd
Terminal=false
EOF2

    chmod +x "$shortcut_path"
    echo "Shortcut created: $shortcut_path"
}

create_wine_shortcut "$@"
EOF

    chmod +x "$target"
    gecho "Script 'wineshort2desktop' installed in ~/.local/bin/"
    gecho "now you can link your wine games to the desktop with 'wineshort2desktop' ."
}

download_latest_otvdm() {
    local DEST="$HOME/.local/otvdm"
    local LATEST_URL TAG ZIP_URL TMPDIR UNPACK_DIR TMPZIP entries srcdir

    LATEST_URL=$(curl -sIL -o /dev/null -w '%{url_effective}' https://github.com/otya128/winevdm/releases/latest)
    TAG="${LATEST_URL##*/}"
    ZIP_URL="https://github.com/otya128/winevdm/releases/download/${TAG}/otvdm-${TAG}.zip"

    TMPDIR=$(mktemp -d)
    UNPACK_DIR="$TMPDIR/unpack"
    mkdir -p "$UNPACK_DIR"
    TMPZIP="$TMPDIR/otvdm.zip"

    gecho "Downloading $ZIP_URL..."
    curl -L --fail -o "$TMPZIP" "$ZIP_URL"
    unzip -q "$TMPZIP" -d "$UNPACK_DIR"
    rm -rf "${DEST:?}"
    mkdir -p "$DEST"

    shopt -s dotglob nullglob
    entries=( "$UNPACK_DIR"/* )
    if [ "${#entries[@]}" -eq 1 ] && [ -d "${entries[0]}" ]; then
        srcdir="${entries[0]}"
        mv "$srcdir"/* "$DEST"/ || true
    else
        mv "$UNPACK_DIR"/* "$DEST"/ || true
    fi
    shopt -u dotglob nullglob

    rm -rf "$TMPDIR"

    gecho "Installed ${TAG} in $DEST"
}

######################################################################################################

main_loop() {
    gecho "=========== STARTING INSTALLATION OF WINE WoW64 + NTsync + Wayland + DXVK ==========="

    general_check

    gecho "----------> Installing custom Wine..."

    install_wine

    gecho "----------> Creating wrapper and symbolic links..."

    create_binary_links

    gecho "----------> Adding ~/.local/bin to PATH..."

    add_local_bin

    gecho "----------> Installing winetricks..."

    install_winetricks

    gecho "----------> Creating wine.desktop launcher..."

    create_wine_launcher

    gecho "----------> Initializing Wine prefix..."

    setup_prefix

    gecho "----------> Setting up DXVK..."

    setup_dxvk

    gecho "----------> Setting up Wayland support..."

    setup_wayland

    gecho "----------> Creating Wine killer shortcut (Ctrl+Alt+Q)..."

    setup_wine_killer_shortcut

    gecho "----------> Installing wineshort2desktop tool..."

    install_wineshort2desktop

    gecho "----------> Adding Experimental Support of 16-bit Windows apps (only for Wine-Tkg, it doesn't seem to work on proton)..."

    download_latest_otvdm

    gecho "=========== INSTALLATION COMPLETED ==========="
    gecho "Please, logout and login again!"
}

if [[ "$1" == "uninstall" ]]; then
    uninstall_wine
    exit 0
else
    main_loop
fi