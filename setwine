#!/usr/bin/env bash


#######################################################################################

# Warnings handler
set -o errtrace 

trap 'func=${FUNCNAME[1]:-main}; echo "WARNING: function \"${func}\" returned error" >&2' ERR

# Defining gecho as Green (success) and recho as Red (error/warning) for echo's
GREEN='\033[0;32m'; RED='\033[0;31m'; RESET='\033[0m'

gecho(){ printf '%b\n' "${GREEN}$*${RESET}"; }
recho(){ printf '%b\n' "${RED}$*${RESET}"; }


########################################################################################

check_internet() {
  gecho "Verifying Internet connection ..."
  if ! ping -q -c 1 -W 1 1.1.1.1 >/dev/null; then
    recho "No Internet connection. Aborting."
    exit 1
  fi
}

check_architecture() {
    if [[ "$(uname -m)" != "x86_64" && "$(uname -m)" != "amd64" ]]; then
        recho "You are not on an amd64 or x86_64 architecture, stopping."
        exit 1
    else
        gecho "You are on an amd64 or x86_64 architecture"
    fi
}

check_wine_installed() {
  gecho "Checking if Wine is already installed..."

  if command -v wine >/dev/null 2>&1 && [[ "$(command -v wine)" != "$HOME/.local/bin/wine" ]]; then
    recho "Wine is already installed globally on the system. Aborting installation."
    exit 1
  fi

  if [[ -d "$HOME/.local/wine" ]]; then
    gecho "A previous Wine installation was detected in ~/.local/wine."
    gecho "Just in case we are not going to remove .wine (your prefix or \"C drive\" of Wine)"
    read -rp "Do you want to remove Wine (not your prefix) and continue with a fresh install? [y/N]: " respuesta
    case "$respuesta" in
      [yY][eE][sS]|[yY])
        gecho "Removing ~/.local/wine..."
        rm -rf "$HOME/.local/wine"
        ;;
      *)
        recho "Aborting installation."
        exit 1
        ;;
    esac
  fi
}


check_cachyos() {
  gecho "Checking if you are on CachyOS..."
  if grep -qi 'cachyos' /etc/os-release; then
    gecho "Operating system identified as CachyOS."
  else
    gecho "Warning: you are not on CachyOS. This script was designed for CachyOS and may not work properly. I did test it on ubuntu once. Impossible to break anything anyway, you should continue anyway"
    read -rp "Do you want to continue at your own risk? [y/N]: " respuesta
    case "$respuesta" in
      [yY][eE][sS]|[yY]) 
        gecho "Continuing..."
        ;;
      *)
        recho "Aborting installation."
        exit 1
        ;;
    esac
  fi
}

general_check() {
  check_internet
  check_architecture
  check_wine_installed
  check_cachyos
}

check_wine_ntsync_and_proton_wow64() {
  local url_api="https://api.github.com/repos/Kron4ek/Wine-Builds/releases"
  local respuesta=$(wget -qO- "$url_api")

  if [[ -z "$respuesta" ]]; then
    recho "Could not get response from GitHub API."
    return 1
  fi

  local ntsync_urls=($(echo "$respuesta" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-[0-9]+\.[0-9]+(-[0-9]+)?-staging-tkg-ntsync-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  local proton_urls=($(echo "$respuesta" \
    | grep -oE '"browser_download_url": ?"[^"]*wine-proton-[0-9]+\.[0-9]+(-[0-9]+)?-amd64-wow64\.tar\.xz"' \
    | sed -E 's/.*"([^"]+)"/\1/' \
    | sort -Vr \
    | head -n 5))

  printf '%s\n' "${ntsync_urls[@]}" "${proton_urls[@]}"
}

install_wine() {
  gecho "Searching for Wine ntsync and Proton WOW64 versions..."
  mapfile -t urls < <(check_wine_ntsync_and_proton_wow64)

  urls=($(printf '%s\n' "${urls[@]}" | grep -E '^https?://'))

  if [[ ${#urls[@]} -eq 0 ]]; then
    recho "No available Wine versions were found."
    exit 1
  fi

  gecho "Select the Wine version you want to install:"
  local i=1
  for url in "${urls[@]}"; do
    echo "  $i) $url"
    ((i++))
  done

  local opcion
  read -rp "Enter the number of the desired version [1-${#urls[@]}]: " opcion

  if ! [[ "$opcion" =~ ^[1-9][0-9]*$ ]] || (( opcion < 1 || opcion > ${#urls[@]} )); then
    recho "Invalid option."
    exit 1
  fi

  local url="${urls[$((opcion-1))]}"
  local destino="$HOME/.local/wine"

  gecho "Installing Wine from:"
  echo "$url"

  if [[ -d "$destino" ]]; then
    gecho "The folder $destino already exists. It will be removed to replace it."
    rm -rf "$destino"
  fi

  wget -O "$HOME/wine.tar.xz" "$url" || {
    recho "Error downloading Wine from $url"
    exit 1
  }

  tar -xf "$HOME/wine.tar.xz" -C "$HOME/.local/" || {
    recho "Error extracting Wine"
    exit 1
  }

  carpeta_extraida=$(find "$HOME/.local" -maxdepth 1 -type d \( \
    -name "wine-*-staging-tkg-ntsync-amd64-wow64" -o \
    -name "wine-proton-*-amd64-wow64" \
    \) -print -quit)

  if [[ -z "$carpeta_extraida" ]]; then
    recho "Extracted folder not found."
    exit 1
  fi

  mv "$carpeta_extraida" "$destino" || {
    recho "Error moving extracted folder."
    exit 1
  }

  rm "$HOME/wine.tar.xz"

  gecho "Wine has been successfully installed at: $destino"
}

create_binary_links() {
    mkdir -p "$HOME/.local/bin"
    cat > "$HOME/.local/bin/wine" <<EOF
#!/bin/bash
export WINEFSYNC=1
export WINENTSYNC=1
export MANGOHUD=1
exec "$HOME/.local/wine/bin/wine" "\$@"
EOF
    chmod +x "$HOME/.local/bin/wine"
    ln -sf "$HOME/.local/wine/bin/winecfg" "$HOME/.local/bin/winecfg"
    ln -sf "$HOME/.local/wine/bin/wineserver" "$HOME/.local/bin/wineserver"
    ln -sf "$HOME/.local/wine/bin/wineboot" "$HOME/.local/bin/wineboot"
    gecho "Symbolic links created in ~/.local/bin and wine wrapper created."
}

add_local_bin() {
    check_shell() {
        if [ -n "$FISH_VERSION" ]; then
            echo "fish"
        elif [ -n "$ZSH_VERSION" ]; then
            echo "zsh"
        elif [ -n "$BASH_VERSION" ]; then
            echo "bash"
        else
            basename "$(ps -p $$ -o comm=)"
        fi
    }

    shell_actual=$(check_shell)
    case "$shell_actual" in
        bash)
            archivo_bash="$HOME/.bashrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$archivo_bash"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$archivo_bash"
                gecho "Added ~/.local/bin to PATH in $archivo_bash."
            else
                gecho " ~/.local/bin already added to PATH in $archivo_bash."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        zsh)
            archivo_zsh="$HOME/.zshrc"
            if ! grep -q "export PATH=\$PATH:\$HOME/.local/bin" "$archivo_zsh"; then
                echo "export PATH=\$PATH:\$HOME/.local/bin" >> "$archivo_zsh"
                gecho "Added ~/.local/bin to PATH in $archivo_zsh."
            else
                gecho " ~/.local/bin already added to PATH in $archivo_zsh."
            fi
            export PATH="$PATH:$HOME/.local/bin"
            ;;
        fish)
            archivo_fish="$HOME/.config/fish/config.fish"
            if ! grep -q "set -gx PATH \$HOME/.local/bin \$PATH" "$archivo_fish"; then
                echo "set -gx PATH \$HOME/.local/bin \$PATH" >> "$archivo_fish"
                gecho "Added ~/.local/bin to PATH in $archivo_fish."
            else
                gecho " ~/.local/bin already added to PATH in $archivo_fish."
            fi
            # Apply immediately in fish
            if command -v fish &> /dev/null; then
                fish -c "set -gx PATH \$HOME/.local/bin \$PATH"
            fi
            ;;
        *)
            recho "Shell not recognized. Could not add path to PATH. You'll have to add it yourself."
            ;;
    esac
    gecho "PATH updated in this session."
}

install_winetricks() {
    wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks -O "$HOME/.local/bin/winetricks" || {
        recho "Error downloading winetricks"
        return 1
    }

    sed -i '/^#!/a export W_OPT_UNATTENDED=1' "$HOME/.local/bin/winetricks"
    chmod +x "$HOME/.local/bin/winetricks"
    gecho "Winetricks installed successfully."
}

create_wine_launcher() {
    local desktop_file="$HOME/.local/share/applications/wine.desktop"

    if [[ -f "$desktop_file" ]]; then
        gecho "wine.desktop already exists. No changes made."
        return 0
    fi

    mkdir -p "$(dirname "$desktop_file")"
    cat > "$desktop_file" <<EOF
[Desktop Entry]
Type=Application
Name=Wine Windows Program Loader
Exec=wine start /unix %f
MimeType=application/x-ms-dos-executable;application/x-msi;application/x-ms-shortcut;application/x-bat;application/x-mswinurl
Icon=wine
NoDisplay=false
StartupNotify=true
EOF

    update-desktop-database "$HOME/.local/share/applications"

    xdg-mime default wine.desktop application/x-ms-dos-executable
    xdg-mime default wine.desktop application/x-msi
    xdg-mime default wine.desktop application/x-ms-shortcut
    xdg-mime default wine.desktop application/x-bat
    xdg-mime default wine.desktop application/x-mswinurl

    gecho "wine.desktop created and properly associated with Windows executables."
}

setup_prefix() {
    if ! command -v wine &> /dev/null; then
        recho "Error: wine is not installed."
        return 1
    fi

    WINEDEBUG=-all wineboot --init > /dev/null 2>&1
}


setup_dxvk() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks is not available."
        return 1
    fi

    gecho "Which DXVK version do you want to install? You can change it later with winetricks"
    gecho "  1) dxvk2041 (stable for intel)"
    gecho "  2) dxvk2051"
    gecho "  3) dxvk (latest available)"
    read -rp "Choose an option [1-3]: " opcion

    case "$opcion" in
        1) dxvk_ver="dxvk2041" ;;
        2) dxvk_ver="dxvk2051" ;;
        3) dxvk_ver="dxvk" ;;
        *) recho "Invalid option. Aborting DXVK setup." ; return 1 ;;
    esac

    gecho "Installing $dxvk_ver with winetricks..."
    WINEDEBUG=-all winetricks "$dxvk_ver" > /dev/null 2>&1
}



setup_wayland() {
    if ! command -v winetricks &> /dev/null; then
        recho "Error: winetricks is not installed or cannot be executed."
        return 1
    fi

    if [ "$XDG_SESSION_TYPE" != "wayland" ]; then
        recho "You are not in a Wayland session. Keeping x11"
        return 1
    fi

    gecho "Enabling Wayland mode. To revert to X11 use 'winetricks graphics=x11'."
    WINEDEBUG=-all winetricks graphics=wayland > /dev/null 2>&1
}


detect_desktop_environment() {
    if [[ "$XDG_CURRENT_DESKTOP" =~ GNOME ]]; then
        echo "gnome"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ XFCE ]]; then
        echo "xfce"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ KDE ]]; then
        echo "kde"
    elif [[ "$XDG_CURRENT_DESKTOP" =~ Cinnamon ]]; then
        echo "cinnamon"
    else
        echo "unknown"
    fi
}

setup_wine_killer_shortcut() {
    local de=$(detect_desktop_environment)

    case "$de" in
        gnome)
            gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/']"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ name "Wine Killer"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ command "wineserver -k"
            gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/wine-killer/ binding "<Ctrl><Alt>Q"
            echo "Shortcut created in GNOME. You can now kill Wine anytime with Ctrl+Alt+Q."
            ;;

        xfce)
            xfconf-query -c xfce4-keyboard-shortcuts -p "/commands/custom/<Primary><Alt>Q" -n -t string -s "wineserver -k"
            gecho "Shortcut created in XFCE. You can now kill Wine anytime with Ctrl+Alt+Q."
            ;;

        kde)
            gecho "Plasma 6 makes creating a hotkey via CLI very difficult"
            gecho "You should go to \"shortcuts\" and create a hotkey for \"wineserver -k\" with a key of your choice to kill Wine if needed"
            ;;

        cinnamon)
            gsettings set org.cinnamon.desktop.keybindings custom-list "['custom0']"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ name "Wine Killer"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ command "wineserver -k"
            gsettings set org.cinnamon.desktop.keybindings.custom-keybinding:/org/cinnamon/desktop/keybindings/custom-keybindings/custom0/ binding "<Ctrl><Alt>Q"
            gecho "Shortcut created in Cinnamon. You can now kill Wine anytime with Ctrl+Alt+Q."
            ;;

        *)
            recho "Desktop environment not supported."
            return 1
            ;;
    esac
}

install_wineshort2desktop() {
    mkdir -p "$HOME/.local/bin"

    cat > "$HOME/.local/bin/wineshort2desktop" <<'EOF'
#!/usr/bin/env bash

create_wine_shortcut() {
    if [[ $# -lt 2 ]]; then
        echo "Usage: create_wine_shortcut <game.exe> <Shortcut Name>"
        return 1
    fi

    local exe="$1"
    local name="$2"

    local cwd
    cwd="$(pwd)"
    local exe_path="$cwd/$exe"
    local base_name="${exe%.exe}"
    local launcher_path="$cwd/$base_name.sh"
    local icon_path="$cwd/icon.png"
    local shortcut_path="$(xdg-user-dir DESKTOP)/$name.desktop"
    local wine_path="$HOME/.local/bin/wine"

    if [[ ! -f "$exe_path" ]]; then
        echo "Error: .exe not found: $exe_path"
        return 1
    fi

    # Extract icons with wrestool if tools are available
    if command -v wrestool >/dev/null && command -v convert >/dev/null && command -v identify >/dev/null; then
        local temp_dir
        temp_dir="$(mktemp -d)"
        wrestool -x --type=14 "$exe_path" -o "$temp_dir" 2>/dev/null

        shopt -s nullglob
        for ico in "$temp_dir"/*.ico; do
            convert "$ico" "${ico%.ico}.png" 2>/dev/null
        done

        local best_png=""
        local best_area=0
        for png in "$temp_dir"/*.png; do
            local dimensions
            dimensions=$(identify -format "%w %h" "$png" 2>/dev/null)
            local width height area
            read -r width height <<< "$dimensions"
            area=$((width * height))
            if (( area > best_area )); then
                best_area=$area
                best_png="$png"
            fi
        done

        if [[ -n "$best_png" ]]; then
            cp "$best_png" "$icon_path"
            echo "Icon extracted: $icon_path"
        else
            echo "Icon extraction failed: no suitable images found."
        fi

        rm -rf "$temp_dir"
    else
        echo "Icon not extracted: missing dependencies."
        echo "To enable icon extraction, install:"
        echo "  sudo pacman -S icoutils imagemagick or sudo apt install icoutils imagemagick"
    fi

    # Create launcher script
    cat <<EOF2 > "$launcher_path"
#!/bin/bash
cd "\$(dirname "\$0")"
exec "$wine_path" "$exe"
EOF2

    chmod +x "$launcher_path"

    # Create shortcut
    cat <<EOF2 > "$shortcut_path"
[Desktop Entry]
Encoding=UTF-8
Version=1.0
Type=Application
Name=$name
GenericName=$name
Comment=$name
Icon=$icon_path
Exec="$launcher_path"
Categories=Game;
Path=$cwd
Terminal=false
EOF2

    chmod +x "$shortcut_path"
    echo "Shortcut created: $shortcut_path"
}

create_wine_shortcut "$@"
EOF

    chmod +x "$HOME/.local/bin/wineshort2desktop"
    gecho "Script 'wineshort2desktop' installed in ~/.local/bin/"
}


######################################################################################################

main_loop() {
    gecho "=========== STARTING INSTALLATION OF WINE WoW64 + NTsync + Wayland + DXVK ==========="

    general_check

    gecho "----------> Installing custom Wine..."
    
    install_wine

    gecho "----------> Creating symbolic links..."
    
    create_binary_links

    gecho "----------> Ensuring ~/.local/bin is in PATH..."
    
    add_local_bin

    gecho "----------> Installing Winetricks..."
    
    install_winetricks

    gecho "----------> Initializing the prefix..."

    setup_prefix

    gecho "----------> Installing DXVK..."

    setup_dxvk

    gecho "----------> Setting up for Wayland..."

    setup_wayland

    gecho "----------> Creating Wine launcher..."

    create_wine_launcher

    gecho "----------> Adding keyboard shortcut to kill Wine with CTRL + ALT + Q ..."

    setup_wine_killer_shortcut

    gecho "----------> Creating the shortcut creator for Desktop \"wineshort2desktop\"..."

    install_wineshort2desktop
    
    gecho "=========== INSTALLATION COMPLETE ==========="
    gecho "Log out and log back in!"
}

main_loop
